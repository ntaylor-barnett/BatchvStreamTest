// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public endpoints
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package public

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "public" service endpoints.
type Endpoints struct {
	BatchGRPC         goa.Endpoint
	StreamedBatchGRPC goa.Endpoint
}

// StreamedBatchGRPCEndpointInput holds both the payload and the server stream
// of the "streamedBatchGRPC" method.
type StreamedBatchGRPCEndpointInput struct {
	// Payload is the method payload.
	Payload *StreamMode
	// Stream is the server stream used by the "streamedBatchGRPC" method to send
	// data.
	Stream StreamedBatchGRPCServerStream
}

// NewEndpoints wraps the methods of the "public" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		BatchGRPC:         NewBatchGRPCEndpoint(s),
		StreamedBatchGRPC: NewStreamedBatchGRPCEndpoint(s),
	}
}

// Use applies the given middleware to all the "public" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.BatchGRPC = m(e.BatchGRPC)
	e.StreamedBatchGRPC = m(e.StreamedBatchGRPC)
}

// NewBatchGRPCEndpoint returns an endpoint function that calls the method
// "batchGRPC" of service "public".
func NewBatchGRPCEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TestPayloadBatch)
		return s.BatchGRPC(ctx, p)
	}
}

// NewStreamedBatchGRPCEndpoint returns an endpoint function that calls the
// method "streamedBatchGRPC" of service "public".
func NewStreamedBatchGRPCEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*StreamedBatchGRPCEndpointInput)
		return nil, s.StreamedBatchGRPC(ctx, ep.Payload, ep.Stream)
	}
}
