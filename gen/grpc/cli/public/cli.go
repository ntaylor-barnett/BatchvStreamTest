// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC client CLI support package
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package cli

import (
	"flag"
	"fmt"
	"os"

	publicc "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `public (batch-grpc|streamed-batch-grpc)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` public batch-grpc --message '{
      "records": [
         {
            "first_field": "Nisi labore praesentium.",
            "organization_id": 2448622867,
            "second_field": "Maiores natus assumenda.",
            "third_field": "Molestias ex."
         },
         {
            "first_field": "Nisi labore praesentium.",
            "organization_id": 2448622867,
            "second_field": "Maiores natus assumenda.",
            "third_field": "Molestias ex."
         }
      ]
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		publicFlags = flag.NewFlagSet("public", flag.ContinueOnError)

		publicBatchGRPCFlags       = flag.NewFlagSet("batch-grpc", flag.ExitOnError)
		publicBatchGRPCMessageFlag = publicBatchGRPCFlags.String("message", "", "")

		publicStreamedBatchGRPCFlags          = flag.NewFlagSet("streamed-batch-grpc", flag.ExitOnError)
		publicStreamedBatchGRPCRecieveallFlag = publicStreamedBatchGRPCFlags.String("recieveall", "", "")
	)
	publicFlags.Usage = publicUsage
	publicBatchGRPCFlags.Usage = publicBatchGRPCUsage
	publicStreamedBatchGRPCFlags.Usage = publicStreamedBatchGRPCUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "public":
			svcf = publicFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "public":
			switch epn {
			case "batch-grpc":
				epf = publicBatchGRPCFlags

			case "streamed-batch-grpc":
				epf = publicStreamedBatchGRPCFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "public":
			c := publicc.NewClient(cc, opts...)
			switch epn {
			case "batch-grpc":
				endpoint = c.BatchGRPC()
				data, err = publicc.BuildBatchGRPCPayload(*publicBatchGRPCMessageFlag)
			case "streamed-batch-grpc":
				endpoint = c.StreamedBatchGRPC()
				data, err = publicc.BuildStreamedBatchGRPCPayload(*publicStreamedBatchGRPCRecieveallFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// publicUsage displays the usage of the public command and its subcommands.
func publicUsage() {
	fmt.Fprintf(os.Stderr, `A mock service to test different service communication models
Usage:
    %s [globalflags] public COMMAND [flags]

COMMAND:
    batch-grpc: Receives an array of payloads
    streamed-batch-grpc: Receives an array of payloads

Additional help:
    %s public COMMAND --help
`, os.Args[0], os.Args[0])
}
func publicBatchGRPCUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] public batch-grpc -message JSON

Receives an array of payloads
    -message JSON: 

Example:
    `+os.Args[0]+` public batch-grpc --message '{
      "records": [
         {
            "first_field": "Nisi labore praesentium.",
            "organization_id": 2448622867,
            "second_field": "Maiores natus assumenda.",
            "third_field": "Molestias ex."
         },
         {
            "first_field": "Nisi labore praesentium.",
            "organization_id": 2448622867,
            "second_field": "Maiores natus assumenda.",
            "third_field": "Molestias ex."
         }
      ]
   }'
`, os.Args[0])
}

func publicStreamedBatchGRPCUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] public streamed-batch-grpc -recieveall BOOL

Receives an array of payloads
    -recieveall BOOL: 

Example:
    `+os.Args[0]+` public streamed-batch-grpc --recieveall false
`, os.Args[0])
}
