// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package server

import (
	"context"

	publicpb "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/pb"
	public "github.com/ntaylor-barnett/BatchvStreamTest/gen/public"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeBatchGRPCResponse encodes responses from the "public" service
// "batchGRPC" endpoint.
func EncodeBatchGRPCResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*public.ResponsePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("public", "batchGRPC", "[]*public.ResponsePayload", v)
	}
	resp := NewBatchGRPCResponse(result)
	return resp, nil
}

// DecodeBatchGRPCRequest decodes requests sent to "public" service "batchGRPC"
// endpoint.
func DecodeBatchGRPCRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *publicpb.BatchGRPCRequest
		ok      bool
	)
	{
		if message, ok = v.(*publicpb.BatchGRPCRequest); !ok {
			return nil, goagrpc.ErrInvalidType("public", "batchGRPC", "*publicpb.BatchGRPCRequest", v)
		}
	}
	var payload *public.TestPayloadBatch
	{
		payload = NewBatchGRPCPayload(message)
	}
	return payload, nil
}

// EncodeStreamedBatchGRPCResponse encodes responses from the "public" service
// "streamedBatchGRPC" endpoint.
func EncodeStreamedBatchGRPCResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*public.ResponsePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("public", "streamedBatchGRPC", "*public.ResponsePayload", v)
	}
	resp := NewStreamedBatchGRPCResponse(result)
	return resp, nil
}
