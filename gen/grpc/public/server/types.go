// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC server types
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package server

import (
	publicpb "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/pb"
	public "github.com/ntaylor-barnett/BatchvStreamTest/gen/public"
)

// NewBatchGRPCPayload builds the payload of the "batchGRPC" endpoint of the
// "public" service from the gRPC request type.
func NewBatchGRPCPayload(message *publicpb.BatchGRPCRequest) []*public.TestPayload {
	v := make([]*public.TestPayload, len(message.Field))
	for i, val := range message.Field {
		v[i] = &public.TestPayload{
			FirstField:     val.FirstField,
			SecondField:    val.SecondField,
			ThirdField:     val.ThirdField,
			OrganizationID: val.OrganizationId,
		}
	}
	return v
}

// NewBatchGRPCResponse builds the gRPC response type from the result of the
// "batchGRPC" endpoint of the "public" service.
func NewBatchGRPCResponse(result []*public.TestPayload) *publicpb.BatchGRPCResponse {
	message := &publicpb.BatchGRPCResponse{}
	message.Field = make([]*publicpb.TestPayload, len(result))
	for i, val := range result {
		message.Field[i] = &publicpb.TestPayload{
			FirstField:     val.FirstField,
			SecondField:    val.SecondField,
			ThirdField:     val.ThirdField,
			OrganizationId: val.OrganizationID,
		}
	}
	return message
}

// NewStreamedBatchGRPCResponse builds the gRPC response type from the result
// of the "streamedBatchGRPC" endpoint of the "public" service.
func NewStreamedBatchGRPCResponse(result []*public.TestPayload) *publicpb.StreamedBatchGRPCResponse {
	message := &publicpb.StreamedBatchGRPCResponse{}
	message.Field = make([]*publicpb.TestPayload, len(result))
	for i, val := range result {
		message.Field[i] = &publicpb.TestPayload{
			FirstField:     val.FirstField,
			SecondField:    val.SecondField,
			ThirdField:     val.ThirdField,
			OrganizationId: val.OrganizationID,
		}
	}
	return message
}

func NewStreamedBatchGRPCStreamingRequest(v *publicpb.StreamedBatchGRPCStreamingRequest) []*public.TestPayload {
	spayload := make([]*public.TestPayload, len(v.Field))
	for i, val := range v.Field {
		spayload[i] = &public.TestPayload{
			FirstField:     val.FirstField,
			SecondField:    val.SecondField,
			ThirdField:     val.ThirdField,
			OrganizationID: val.OrganizationId,
		}
	}
	return spayload
}
