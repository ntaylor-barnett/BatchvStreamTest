// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC server types
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package server

import (
	publicpb "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/pb"
	public "github.com/ntaylor-barnett/BatchvStreamTest/gen/public"
)

// NewBatchGRPCPayload builds the payload of the "batchGRPC" endpoint of the
// "public" service from the gRPC request type.
func NewBatchGRPCPayload(message *publicpb.BatchGRPCRequest) *public.TestPayloadBatch {
	v := &public.TestPayloadBatch{}
	if message.Records != nil {
		v.Records = make([]*public.TestPayload, len(message.Records))
		for i, val := range message.Records {
			v.Records[i] = &public.TestPayload{
				FirstField:     val.FirstField,
				SecondField:    val.SecondField,
				ThirdField:     val.ThirdField,
				OrganizationID: val.OrganizationId,
			}
		}
	}
	return v
}

// NewBatchGRPCResponse builds the gRPC response type from the result of the
// "batchGRPC" endpoint of the "public" service.
func NewBatchGRPCResponse(result []*public.ResponsePayload) *publicpb.BatchGRPCResponse {
	message := &publicpb.BatchGRPCResponse{}
	message.Field = make([]*publicpb.ResponsePayload, len(result))
	for i, val := range result {
		message.Field[i] = &publicpb.ResponsePayload{
			FirstField:  val.FirstField,
			FourthField: val.FourthField,
		}
	}
	return message
}

// NewStreamedBatchGRPCResponse builds the gRPC response type from the result
// of the "streamedBatchGRPC" endpoint of the "public" service.
func NewStreamedBatchGRPCResponse(result *public.ResponsePayload) *publicpb.StreamedBatchGRPCResponse {
	message := &publicpb.StreamedBatchGRPCResponse{
		FirstField:  result.FirstField,
		FourthField: result.FourthField,
	}
	return message
}

func NewTestPayload(v *publicpb.TestPayload) *public.TestPayload {
	spayload := &public.TestPayload{
		FirstField:     v.FirstField,
		SecondField:    v.SecondField,
		ThirdField:     v.ThirdField,
		OrganizationID: v.OrganizationId,
	}
	return spayload
}
