// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package client

import (
	"context"

	publicpb "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/pb"
	public "github.com/ntaylor-barnett/BatchvStreamTest/gen/public"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildBatchGRPCFunc builds the remote method to invoke for "public" service
// "batchGRPC" endpoint.
func BuildBatchGRPCFunc(grpccli publicpb.PublicClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.BatchGRPC(ctx, reqpb.(*publicpb.BatchGRPCRequest), opts...)
		}
		return grpccli.BatchGRPC(ctx, &publicpb.BatchGRPCRequest{}, opts...)
	}
}

// EncodeBatchGRPCRequest encodes requests sent to public batchGRPC endpoint.
func EncodeBatchGRPCRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]*public.TestPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("public", "batchGRPC", "[]*public.TestPayload", v)
	}
	return NewBatchGRPCRequest(payload), nil
}

// DecodeBatchGRPCResponse decodes responses from the public batchGRPC endpoint.
func DecodeBatchGRPCResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*publicpb.BatchGRPCResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("public", "batchGRPC", "*publicpb.BatchGRPCResponse", v)
	}
	res := NewBatchGRPCResult(message)
	return res, nil
}

// BuildStreamedBatchGRPCFunc builds the remote method to invoke for "public"
// service "streamedBatchGRPC" endpoint.
func BuildStreamedBatchGRPCFunc(grpccli publicpb.PublicClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.StreamedBatchGRPC(ctx, opts...)
		}
		return grpccli.StreamedBatchGRPC(ctx, opts...)
	}
}

// DecodeStreamedBatchGRPCResponse decodes responses from the public
// streamedBatchGRPC endpoint.
func DecodeStreamedBatchGRPCResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	return &StreamedBatchGRPCClientStream{
		stream: v.(publicpb.Public_StreamedBatchGRPCClient),
	}, nil
}
