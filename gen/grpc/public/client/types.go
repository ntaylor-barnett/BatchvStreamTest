// Code generated by goa v3.1.1, DO NOT EDIT.
//
// public gRPC client types
//
// Command:
// $ goa gen github.com/ntaylor-barnett/BatchvStreamTest/design

package client

import (
	publicpb "github.com/ntaylor-barnett/BatchvStreamTest/gen/grpc/public/pb"
	public "github.com/ntaylor-barnett/BatchvStreamTest/gen/public"
)

// NewBatchGRPCRequest builds the gRPC request type from the payload of the
// "batchGRPC" endpoint of the "public" service.
func NewBatchGRPCRequest(payload *public.TestPayloadBatch) *publicpb.BatchGRPCRequest {
	message := &publicpb.BatchGRPCRequest{}
	if payload.Records != nil {
		message.Records = make([]*publicpb.TestPayload, len(payload.Records))
		for i, val := range payload.Records {
			message.Records[i] = &publicpb.TestPayload{
				FirstField:     val.FirstField,
				SecondField:    val.SecondField,
				ThirdField:     val.ThirdField,
				OrganizationId: val.OrganizationID,
			}
		}
	}
	return message
}

// NewBatchGRPCResult builds the result type of the "batchGRPC" endpoint of the
// "public" service from the gRPC response type.
func NewBatchGRPCResult(message *publicpb.BatchGRPCResponse) []*public.ResponsePayload {
	result := make([]*public.ResponsePayload, len(message.Field))
	for i, val := range message.Field {
		result[i] = &public.ResponsePayload{
			FirstField:  val.FirstField,
			FourthField: val.FourthField,
		}
	}
	return result
}

func NewResponsePayload(v *publicpb.StreamedBatchGRPCResponse) *public.ResponsePayload {
	result := &public.ResponsePayload{
		FirstField:  v.FirstField,
		FourthField: v.FourthField,
	}
	return result
}

func NewTestPayload(spayload *public.TestPayload) *publicpb.TestPayload {
	v := &publicpb.TestPayload{
		FirstField:     spayload.FirstField,
		SecondField:    spayload.SecondField,
		ThirdField:     spayload.ThirdField,
		OrganizationId: spayload.OrganizationID,
	}
	return v
}
